{"version":3,"sources":["index.js"],"names":["Square","props","classNames","isWinner","join","className","onClick","value","RotationButtonAnti","rotationIsActive","n","m","RotationButtonClock","Board","lines","i","length","a","b","c","d","e","this","squares","includes","squareIsWinner","num","subBoard","j","push","renderSquare","board","createSubBoard","createBoard","React","Component","Game","state","Array","fill","xIsNext","handleClick","bind","resetGame","rotateLeft","rotateRight","setState","slice","calculateWinner","row","col","p","Math","floor","indexes","subToBoard","left","right","status","winner","class","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16b440e4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/* Square Component: defined as a function component*/\nfunction Square(props) {\n\n  /*\n    Return a button element with 2 clasNames: \"square\" and then\n    \"square-isLooser\" if props.isWinner = false or \"square-isWinner\"\n    if props.isWinner = true.\n  */\n\n  /*Props coming from the Board component : value, onClick, isWinner*/\n\n  const classNames = [\"square\",(props.isWinner)? \"square-isWinner\" : \"square-isLooser\" ].join(\" \");\n\n  return (\n    <button className={classNames}\n            onClick = {props.onClick}\n    >\n        {props.value}\n    </button>\n  );\n}\n\nfunction RotationButtonAnti(props){\n  /*\n    props coming from component \"Game\"\n    are: rotationIsActive, onClick, [n,m]\n\n      -rotationIsActive: true/false\n      -onClick: function that performs anticlockwise rotation in the board\n      -[n,m]: indexes of the sub-board\n  */\n\n  if (!props.rotationIsActive){\n      return (<div></div>)\n  }\n\n  return (\n    <button className=\"rotationButton\"\n        onClick = {()=>props.onClick(props.n,props.m)}\n    >\n        &#10226;\n    </button>\n  );\n}\n\nfunction RotationButtonClock(props){\n  /*\n    props coming from component \"Game\"\n    are: rotationIsActive, onClick, [n,m]\n\n      -rotationIsActive: true/false\n      -onClick: function that performs clockwise rotation in the board\n      -[n,m]: indexes of the sub-board\n  */\n\n  if (!props.rotationIsActive){\n      return (<div></div>)\n  }\n\n  return (\n    <button className=\"rotationButton\"\n        onClick = {()=>props.onClick(props.n,props.m)}\n    >\n        &#10227;\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n\n  /*Receives from Game the props: onClick, squares*/\n\n  /*Function that checks if square[i] is in the winner line*/\n  squareIsWinner(n) {\n    const lines = [\n      [0,1,2,3,4],\n      [1,2,3,4,5],\n      [6,7,8,9,10],\n      [7,8,9,10,11],\n      [12,13,14,15,16],\n      [13,14,15,16,17],\n      [18,19,20,21,22],\n      [19,20,21,22,23],\n      [24,25,26,27,28],\n      [25,26,27,28,29],\n      [30,31,32,33,34],\n      [31,32,33,34,35],\n      [0,6,12,18,24],\n      [6,12,18,24,30],\n      [1,7,13,19,25],\n      [7,13,19,25,31],\n      [2,8,14,20,26],\n      [8,14,20,26,32],\n      [3,9,15,21,27],\n      [9,15,21,27,33],\n      [4,10,16,22,28],\n      [10,16,22,28,34],\n      [5,11,17,23,29],\n      [11,17,23,29,35],\n      [1,8,15,22,29],\n      [0,7,14,21,28],\n      [7,14,21,28,35],\n      [6,13,20,27,34],\n      [4,9,14,19,24],\n      [5,10,15,20,25],\n      [10,15,20,25,30],\n      [11,16,21,26,31]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c, d, e] = lines[i];\n      if (this.props.squares[a] && this.props.squares[a] === this.props.squares[b] && this.props.squares[a] === this.props.squares[c] && this.props.squares[a] === this.props.squares[d] && this.props.squares[a] === this.props.squares[e]) {\n        return [a,b,c,d,e].includes(n);\n      }\n    }\n    return false;\n  }\n\n  /*Render the squares*/\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        isWinner = {this.squareIsWinner(i)}\n      />\n    );\n  }\n\n\n\n  /* Function to create the SubTable*/\n  createSubBoard(n,m) {\n    /*n,m are the subtable indexes*/\n    let subBoard = []\n    let num;\n\n    // Outer loop to create each line\n    for (let i = 0; i < 3; i++) {\n      //Inner loop to create children\n      for (let j = 0; j < 3; j++) {\n        num = 6*(3*n+i) + 3*m + j;\n        subBoard.push(<div className =\"s${Math.floor(n/3)+m%3}\">{this.renderSquare(num)}</div>)\n      }\n    }\n    return (\n      <div className = \"board-${n}${m}\">\n        {subBoard}\n      </div>\n    )\n  }\n\n  createBoard(){\n    let board = []\n\n    // Outer loop to create each line\n    for (let n = 0; n < 2; n++) {\n      //Inner loop to create children\n      for (let m = 0; m < 2; m++) {\n        board.push(this.createSubBoard(n,m));\n      }\n    }\n    return(\n        board\n    )\n  }\n\n  render() {\n    return(\n        this.createBoard()\n    )\n  }\n\n}\n\n\n\nclass Game extends React.Component {\n\n  /*Constructor of the class*/\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(36).fill(null),\n      xIsNext: true,\n      rotationIsActive: false\n    };\n    /*Bind functions*/\n    this.handleClick = this.handleClick.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.rotateLeft = this.rotateLeft.bind(this);\n    this.rotateRight = this.rotateRight.bind(this);\n  }\n\n  /*HANDLELERS*/\n\n  /*Add a method to reset the game*/\n  resetGame() {\n    this.setState({\n      squares: Array(36).fill(null),\n      xIsNext: true,\n      rotationIsActive: false\n    });\n  }\n  /*handle a click on a square*/\n  handleClick(i) {\n\n    if (this.state.rotationIsActive){\n      return\n    }\n\n    const squares = this.state.squares.slice();\n\n    /*Change the state of the squares*/\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    if (!calculateWinner(squares)){\n        this.setState({\n          squares: squares,\n          rotationIsActive: true\n        });\n    } else {\n        this.setState({\n          squares: squares,\n          rotationIsActive: false\n        });\n    }\n  }\n\n  /*sub-board index to board index*/\n  subToBoard(row,col,p){\n    /*\n      row = row index of the sub-board\n      col = col index of the sub-board\n      p = linear index (row-wise) of the sub-board square\n\n      this function returns the linear (row-wise) index of a square position in a sub-board,\n      given the row and column of that sub-board\n    */\n    const i = Math.floor(p/3);\n    const j = p%3;\n\n    const I = 3*row + i;\n    const J = 3*col + j;\n\n    return (6*I + J);\n  }\n\n  left(p) {\n    /*\n      rotations to the left of the squares in a sub-board.\n      p is the linear (row-wise) index of the \"p\" to be rotated.\n    */\n    const arr = [2,5,8,1,4,7,0,3,6]\n    return arr[p]\n  }\n\n  right(p) {\n    /*\n      rotations to the right of the squares in a sub-board.\n      p is the linear (row-wise) index of the \"p\" to be rotated.\n    */\n    const arr = [6,3,0,7,4,1,8,5,2]\n    return arr[p]\n  }\n\n\n  rotateLeft(row,col) {\n    /*\n      rotation to the left of all the squares in the sub-board at\n      (row,col) in the complete board.\n    */\n\n    /*Do nothing if rotationIsActive=false or winner = true*/\n    if(!this.state.rotationIsActive || calculateWinner(this.state.squares)){\n      return\n    }\n\n    const squares = [];\n    const indexes = [];\n    let p = 0;\n\n    for(let i = 0;i<9;i++){\n      indexes.push(this.subToBoard(row,col,i));\n    }\n    for(let n = 0;n<36;n++){\n      if (indexes.includes(n)){\n        squares.push(this.state.squares[this.subToBoard(row,col,this.left(p))]);\n        p++;\n      } else {\n        squares.push(this.state.squares[n]);\n      }\n    }\n    this.setState({squares: squares,rotationIsActive: false,xIsNext: !(this.state.xIsNext)})\n  }\n\n  rotateRight(row,col) {\n    /*\n      rotation to the left of all the squares in the sub-board at\n      (row,col) in the complete board.\n    */\n\n    /*Do nothing if rotationIsActive=false or winner = true*/\n    if(!this.state.rotationIsActive || calculateWinner(this.state.squares)){\n      return\n    }\n\n    const squares = [];\n    const indexes = [];\n    let p = 0;\n\n    for(let i = 0;i<9;i++){\n      indexes.push(this.subToBoard(row,col,i));\n    }\n\n    for(let n = 0;n<36;n++){\n      if (indexes.includes(n)){\n        squares.push(this.state.squares[this.subToBoard(row,col,this.right(p))]);\n        p++;\n      } else {\n        squares.push(this.state.squares[n]);\n      }\n    }\n    this.setState({squares: squares,rotationIsActive: false,xIsNext: !(this.state.xIsNext)})\n\n  }\n\n\n\n\n\n\n  /*RENDER*/\n\n  render() {\n    const squares = this.state.squares.slice();\n    const winner = calculateWinner(squares);\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else if (!squares.includes(null)) {\n      status = \"It's a tie!!!\"\n    } else if (!this.state.rotationIsActive) {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    } else {\n      status = \"Player \" + (this.state.xIsNext ? \"X\" : \"O\") + \": Rotate a sub-board\";\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"gameStatus\">\n                <h1>{status}</h1>\n            </div>\n            <div>\n                <button\n                    className=\"reset-button\"\n                    onClick = {this.resetGame}\n                >\n                  reset\n              </button>\n            </div>\n            {/*CONTAINER FOR THE BOARD AND ROTATE BUTTONS*/}\n            <div className=\"grid-container\">\n                {/*board container*/}\n                <div class=\"board\">\n                    <Board\n                      squares={squares}\n                      onClick={this.handleClick}\n                    />\n                </div>\n                {/*container for buttons on top area*/}\n                <div className=\"top-area\">\n                    <div class=\"button-00-clock\">\n                        <RotationButtonClock\n                            n={0}\n                            m={0}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateRight}\n                        />\n                    </div>\n                    <div class=\"button-01-anti\">\n                        <RotationButtonAnti\n                            n={0}\n                            m={1}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateLeft}\n                        />\n                    </div>\n                {/*container for buttons on bottom area*/}\n                </div>\n                <div className=\"bottom-area\">\n                    <div class=\"button-10-anti\">\n                        <RotationButtonAnti\n                            n={1}\n                            m={0}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateLeft}\n                        />\n                    </div>\n                    <div class=\"button-11-clock\">\n                        <RotationButtonClock\n                            n={1}\n                            m={1}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateRight}\n                        />\n                    </div>\n                </div>\n                {/*container for buttons on left area*/}\n                <div className=\"left-area\">\n                    <div class=\"button-00-anti\">\n                        <RotationButtonAnti\n                            n={0}\n                            m={0}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateLeft}\n                        />\n                    </div>\n                    <div class=\"button-10-clock\">\n                        <RotationButtonClock\n                            n={1}\n                            m={0}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateRight}\n                        />\n                    </div>\n                </div>\n                {/*container for buttons on right area*/}\n                <div className=\"right-area\">\n                    <div class=\"button-01-clock\">\n                        <RotationButtonClock\n                            n={0}\n                            m={1}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateRight}\n                        />\n                    </div>\n                    <div class=\"button-11-anti\">\n                        <RotationButtonAnti\n                            n={1}\n                            m={1}\n                            rotationIsActive = {this.state.rotationIsActive}\n                            onClick = {this.rotateLeft}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n\n}\n\n\n/*Render the game class*/\n\n\n\nReactDOM.render(\n  <Game />, document.getElementById(\"root\")\n  );\n\n/*Auxiliar function that calculates the winner*/\nfunction calculateWinner(squares) {\n  const lines = [\n    [0,1,2,3,4],\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [7,8,9,10,11],\n    [12,13,14,15,16],\n    [13,14,15,16,17],\n    [18,19,20,21,22],\n    [19,20,21,22,23],\n    [24,25,26,27,28],\n    [25,26,27,28,29],\n    [30,31,32,33,34],\n    [31,32,33,34,35],\n    [0,6,12,18,24],\n    [6,12,18,24,30],\n    [1,7,13,19,25],\n    [7,13,19,25,31],\n    [2,8,14,20,26],\n    [8,14,20,26,32],\n    [3,9,15,21,27],\n    [9,15,21,27,33],\n    [4,10,16,22,28],\n    [10,16,22,28,34],\n    [5,11,17,23,29],\n    [11,17,23,29,35],\n    [1,8,15,22,29],\n    [0,7,14,21,28],\n    [7,14,21,28,35],\n    [6,13,20,27,34],\n    [4,9,14,19,24],\n    [5,10,15,20,25],\n    [10,15,20,25,30],\n    [11,16,21,26,31]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d, e] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}