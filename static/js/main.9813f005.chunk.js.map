{"version":3,"sources":["index.js"],"names":["Square","props","classNames","isWinner","join","className","onClick","value","RotationButton","rotationIsActive","symbol","onClickLeft","onClickRight","RotationButtonsPannel","row","col","this","renderRotationButton","React","Component","Board","n","lines","i","length","a","b","c","d","e","squares","includes","squareIsWinner","m","num","subTable","subRow","j","push","renderSquare","board","createSubTable","createTable","Game","state","Array","fill","xIsNext","handleClick","bind","resetGame","rotateLeft","rotateRight","setState","slice","calculateWinner","p","Math","floor","indexes","subToBoard","left","right","status","winner","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9813f005.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/* Square Component: defined as a function component*/\nfunction Square(props) {\n\n  /*\n    Return a button element with 2 clasNames: \"square\" and then\n    \"square-isLooser\" if props.isWinner = false or \"square-isWinner\"\n    if props.isWinner = true.\n  */\n\n  /*Props coming from the Board component : value, onClick, isWinner*/\n\n  const classNames = [\"square\",(props.isWinner)? \"square-isWinner\" : \"square-isLooser\" ].join(\" \");\n\n  return (\n    <button className={classNames}\n            onClick = {props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\n//\nfunction RotationButton(props){\n  /*\n    props coming from component \"RotationButtonsPannel\"\n    are: rotationIsActive, onClickLeft, onClickRight\n\n      -rotationIsActive: true/false\n      -onClickLeft: function that performs anticlockwise rotation in the board\n      -onClickRight: function that performs clockwise rotation in the rotation in the board\n  */\n  const classNames = [\"rotationButton\",(props.rotationIsActive)? \"rotationButton-Active\" : \"rotationButton-Deactivated\"].join(\" \");\n\n  const symbol = [\"leftt\",\"right\"]; //clock/anticlockwise arrow to be printed inside the button\n\n  return (\n    <div className = \"rotationPannel-cell\">\n      <button className={classNames}\n              onClick = {props.onClickLeft}\n      >\n        {symbol[0]}\n      </button>\n      <button className={classNames}\n              onClick = {props.onClickRight}\n      >\n        {symbol[1]}\n      </button>\n    </div>\n  );\n}\n\nclass RotationButtonsPannel extends React.Component {\n\n  /*\n    props coming from Game:\n      -rotationIsActive: true/false\n      -onClickLeft\n      -onClickRight\n  */\n\n  renderRotationButton(row,col){\n    return (\n      <RotationButton\n        rotationIsActive = {this.props.rotationIsActive}\n        onClickLeft = {()=>this.props.onClickLeft(row,col)}\n        onClickRight = {()=>this.props.onClickRight(row,col)}\n      />\n    );\n  }\n\n\n\n\n  render(){\n    return(\n      <table className = \"rotationButtonsPannel\">\n        <tr>\n          <td>{this.renderRotationButton(0,0)}</td>\n          <td>{this.renderRotationButton(0,1)}</td>\n        </tr>\n        <tr>\n          <td>{this.renderRotationButton(1,0)}</td>\n          <td>{this.renderRotationButton(1,1)}</td>\n        </tr>\n      </table>\n    );\n  }\n}\n\n\nclass Board extends React.Component {\n\n  /*Receives from Game the props: onClick, squares*/\n\n  /*Function that checks if square[i] is in the winner line*/\n  squareIsWinner(n) {\n    const lines = [\n      [0,1,2,3,4],\n      [1,2,3,4,5],\n      [6,7,8,9,10],\n      [7,8,9,10,11],\n      [12,13,14,15,16],\n      [13,14,15,16,17],\n      [18,19,20,21,22],\n      [19,20,21,22,23],\n      [24,25,26,27,28],\n      [25,26,27,28,29],\n      [30,31,32,33,34],\n      [31,32,33,34,35],\n      [0,6,12,18,24],\n      [6,12,18,24,30],\n      [1,7,13,19,25],\n      [7,13,19,25,31],\n      [2,8,14,20,26],\n      [8,14,20,26,32],\n      [3,9,15,21,27],\n      [9,15,21,27,33],\n      [4,10,16,22,28],\n      [10,16,22,28,34],\n      [5,11,17,23,29],\n      [11,17,23,29,35],\n      [1,8,15,22,29],\n      [0,7,14,21,28],\n      [7,14,21,28,35],\n      [6,13,20,27,34],\n      [4,9,14,19,24],\n      [5,10,15,20,25],\n      [10,15,20,25,30],\n      [11,16,21,26,31]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c, d, e] = lines[i];\n      if (this.props.squares[a] && this.props.squares[a] === this.props.squares[b] && this.props.squares[a] === this.props.squares[c] && this.props.squares[a] === this.props.squares[d] && this.props.squares[a] === this.props.squares[e]) {\n        return [a,b,c,d,e].includes(n);\n      }\n    }\n    return false;\n  }\n\n  /*Render the squares*/\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        isWinner = {this.squareIsWinner(i)}\n      />\n    );\n  }\n\n\n\n  /* Function to create the SubTable*/\n  createSubTable(n,m) {\n    /*n,m are the subtable indexes*/\n    let subTable = []\n    let num;\n\n    // Outer loop to create each line\n    for (let i = 0; i < 3; i++) {\n      let subRow = []\n      //Inner loop to create children\n      for (let j = 0; j < 3; j++) {\n        num = 6*(3*n+i) + 3*m + j;\n        subRow.push(<td>{this.renderSquare(num)}</td>)\n      }\n      //Create the parent and add the children\n      subTable.push(<tr className=\"subtable-row\">{subRow}</tr>)\n    }\n    return (<table className = \"subTable\">{subTable}</table>)\n  }\n\n  createTable(){\n    let board = []\n\n    // Outer loop to create each line\n    for (let n = 0; n < 2; n++) {\n      let row = []\n      //Inner loop to create children\n      for (let m = 0; m < 2; m++) {\n        row.push(<td>{this.createSubTable(n,m)}</td>)\n      }\n      //Create the parent and add the children\n      board.push(<tr className=\"board-row\">{row}</tr>)\n    }\n    return board\n  }\n\n  render() {\n    return(\n      <table className=\"Table\">\n        {this.createTable()}\n      </table>\n    )\n  }\n\n}\n\n\n\nclass Game extends React.Component {\n\n  /*Constructor of the class*/\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(36).fill(null),\n      xIsNext: true,\n      rotationIsActive: false\n    };\n    /*Bind functions*/\n    this.handleClick = this.handleClick.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.rotateLeft = this.rotateLeft.bind(this);\n    this.rotateRight = this.rotateRight.bind(this);\n  }\n\n  /*HANDLELERS*/\n\n  /*Add a method to reset the game*/\n  resetGame() {\n    this.setState({\n      squares: Array(36).fill(null),\n      xIsNext: true,\n      rotationIsActive: false\n    });\n  }\n  /*handle a click on a square*/\n  handleClick(i) {\n\n    if (this.state.rotationIsActive){\n      return\n    }\n\n    const squares = this.state.squares.slice();\n\n    /*Change the state of the squares*/\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      squares: squares,\n      rotationIsActive: true\n    });\n  }\n\n  /*sub-board index to board index*/\n  subToBoard(row,col,p){\n    /*\n      row = row index of the sub-board\n      col = col index of the sub-board\n      p = linear index (row-wise) of the sub-board square\n\n      this function returns the linear (row-wise) index of a square position in a sub-board,\n      given the row and column of that sub-board\n    */\n    const i = Math.floor(p/3);\n    const j = p%3;\n\n    const I = 3*row + i;\n    const J = 3*col + j;\n\n    return (6*I + J);\n  }\n\n  left(p) {\n    /*\n      rotations to the left of the squares in a sub-board.\n      p is the linear (row-wise) index of the \"p\" to be rotated.\n    */\n    const arr = [2,5,8,1,4,7,0,3,6]\n    return arr[p]\n  }\n\n  right(p) {\n    /*\n      rotations to the right of the squares in a sub-board.\n      p is the linear (row-wise) index of the \"p\" to be rotated.\n    */\n    const arr = [6,3,0,7,4,1,8,5,2]\n    return arr[p]\n  }\n\n\n  rotateLeft(row,col) {\n    /*\n      rotation to the left of all the squares in the sub-board at\n      (row,col) in the complete board.\n    */\n\n    /*Do nothing if rotationIsActive=false or winner = true*/\n    if(!this.state.rotationIsActive || calculateWinner(this.state.squares)){\n      return\n    }\n\n    const squares = [];\n    const indexes = [];\n    let p = 0;\n\n    for(let i = 0;i<9;i++){\n      indexes.push(this.subToBoard(row,col,i));\n    }\n    for(let n = 0;n<36;n++){\n      if (indexes.includes(n)){\n        squares.push(this.state.squares[this.subToBoard(row,col,this.left(p))]);\n        p++;\n      } else {\n        squares.push(this.state.squares[n]);\n      }\n    }\n    this.setState({squares: squares,rotationIsActive: false,xIsNext: !(this.state.xIsNext)})\n  }\n\n  rotateRight(row,col) {\n    /*\n      rotation to the left of all the squares in the sub-board at\n      (row,col) in the complete board.\n    */\n\n    /*Do nothing if rotationIsActive=false or winner = true*/\n    if(!this.state.rotationIsActive || calculateWinner(this.state.squares)){\n      return\n    }\n\n    const squares = [];\n    const indexes = [];\n    let p = 0;\n\n    for(let i = 0;i<9;i++){\n      indexes.push(this.subToBoard(row,col,i));\n    }\n\n    for(let n = 0;n<36;n++){\n      if (indexes.includes(n)){\n        squares.push(this.state.squares[this.subToBoard(row,col,this.right(p))]);\n        p++;\n      } else {\n        squares.push(this.state.squares[n]);\n      }\n    }\n    this.setState({squares: squares,rotationIsActive: false,xIsNext: !(this.state.xIsNext)})\n\n  }\n\n\n\n\n\n\n  /*RENDER*/\n\n  render() {\n    const squares = this.state.squares.slice();\n    const winner = calculateWinner(squares);\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else if (!squares.includes(null)) {\n      status = \"It's a tie!!!\"\n    } else if (!this.state.rotationIsActive) {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    } else {\n      status = \"Player \" + (this.state.xIsNext ? \"X\" : \"O\") + \": Rotate a sub-board\";\n    }\n\n    return (\n      <div className=\"game\">\n        <div>\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              onClick={this.handleClick}\n            />\n            <div className=\"reset-button\">\n              <button onClick = {this.resetGame}>\n                  Reset\n              </button>\n            </div>\n            <RotationButtonsPannel\n              rotationIsActive={this.state.rotationIsActive}\n              onClickLeft = {this.rotateLeft}\n              onClickRight = {this.rotateRight}\n            />\n          </div>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n/*Render the game class*/\n\n\n\nReactDOM.render(\n  <Game />, document.getElementById(\"root\")\n  );\n\n/*Auxiliar function that calculates the winner*/\nfunction calculateWinner(squares) {\n  const lines = [\n    [0,1,2,3,4],\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [7,8,9,10,11],\n    [12,13,14,15,16],\n    [13,14,15,16,17],\n    [18,19,20,21,22],\n    [19,20,21,22,23],\n    [24,25,26,27,28],\n    [25,26,27,28,29],\n    [30,31,32,33,34],\n    [31,32,33,34,35],\n    [0,6,12,18,24],\n    [6,12,18,24,30],\n    [1,7,13,19,25],\n    [7,13,19,25,31],\n    [2,8,14,20,26],\n    [8,14,20,26,32],\n    [3,9,15,21,27],\n    [9,15,21,27,33],\n    [4,10,16,22,28],\n    [10,16,22,28,34],\n    [5,11,17,23,29],\n    [11,17,23,29,35],\n    [1,8,15,22,29],\n    [0,7,14,21,28],\n    [7,14,21,28,35],\n    [6,13,20,27,34],\n    [4,9,14,19,24],\n    [5,10,15,20,25],\n    [10,15,20,25,30],\n    [11,16,21,26,31]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d, e] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}